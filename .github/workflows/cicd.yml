# Nome do workflow (como aparecer√° na aba "Actions" do GitHub)
name: CI - Robot Framework com Allure e Relat√≥rio Padr√£o

# Quando esse workflow deve ser executado:
on:
  push:                  # Ao realizar push para as branches abaixo
    branches: [main, develop]
  pull_request:          # Ao criar Pull Request para as branches abaixo
    branches: [main, develop]
  workflow_dispatch:     # Permite executar manualmente via bot√£o "Run workflow" no GitHub

# Defini√ß√£o do job principal chamado "robot-tests"
jobs:
  robot-tests:
    runs-on: windows-latest  # Usa uma m√°quina virtual Windows mais recente

    steps:
      # Etapa 1: Clona o reposit√≥rio na VM do GitHub
      - name: Clonar o reposit√≥rio
        uses: actions/checkout@v3

      # Etapa 2: Instala o Python 3.11
      - name: Instalar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Etapa 3: Instala depend√™ncias do projeto (Robot Framework, Browser, etc)
      - name: Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Etapa 4: Instala o Allure CLI (linha de comando)
      - name: Instalar Allure CLI
        run: npm install -g allure-commandline

      # Etapa 5: Inicializa os browsers usados pelo Robot Framework Browser
      - name: Inicializar o Browser
        run: rfbrowser init

      # Etapa 6: Define tamanho de tela (opcional, evita bugs visuais)
      - name: Definir viewport
        run: echo "viewport fixo para testes visuais"
        shell: bash

      # Etapa 7: Executa os testes Robot Framework + salva sa√≠da para Allure
      - name: Executar testes com Robot + Allure
        run: robot --output results/output.xml --log results/log.html --report results/report.html --listener allure_robotframework;allure-results "Testes automatizados/tests"


      # Etapa 8: Gera o relat√≥rio Allure com base nos arquivos brutos gerados
      - name: Gerar relat√≥rio Allure
        run: |
          allure generate allure-results -o allure-report --clean

      # Etapa 9: Salva o relat√≥rio padr√£o do Robot Framework como artefato
      - name: Salvar relat√≥rio padr√£o do Robot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: robot-report
          path: results/

      # Etapa 10: Salva o relat√≥rio Allure como artefato tamb√©m
      - name: Salvar relat√≥rio como artefato
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/

      # ‚≠êÔ∏è Etapa 12: Cria uma issue no Jira automaticamente se algum teste falhar
      - name: Criar issue no Jira se houver falha
        if: failure()  # Executa SOMENTE se o job falhar
        run: |
          echo "Criando issue no Jira..."

          # Monta t√≠tulo e descri√ß√£o da issue
          ISSUE_SUMMARY="üö® Falha nos testes automatizados na branch ${{ github.ref_name }}"
          ISSUE_DESCRIPTION="Um ou mais testes falharam no CI.\n\nüîó [Ver execu√ß√£o no GitHub](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\nüìÑ Commit: ${{ github.sha }}\nüë§ Autor: ${{ github.actor }}"

          # Envia o POST para a API do Jira
          curl -X POST \
            -H "Authorization: Basic $(echo -n '${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}' | base64)" \
            -H "Content-Type: application/json" \
            "${{ secrets.JIRA_URL }}/rest/api/3/issue" \
            -d "{
              \"fields\": {
                \"project\": {
                  \"key\": \"${{ secrets.JIRA_PROJECT_KEY }}\"
                },
                \"summary\": \"$ISSUE_SUMMARY\",
                \"description\": \"$ISSUE_DESCRIPTION\",
                \"issuetype\": {
                  \"name\": \"Bug\"
                }
              }
            }"
