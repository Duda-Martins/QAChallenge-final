# Nome do workflow (aparece na aba "Actions" do GitHub)
name: CI - Robot Framework no Windows

# Define os gatilhos para iniciar o workflow
on:
  push:                # Quando houver push para as branches abaixo
    branches: [main, develop]
  pull_request:        # Ou quando houver Pull Request para essas branches
    branches: [main, develop]

# Início do job chamado "robot-tests"
jobs:
  robot-tests:
    # Ambiente (runner) onde o job será executado: Windows
    runs-on: ubuntu-latest

    # Lista de etapas (steps) que serão executadas em ordem
    steps:

      # Etapa 1: Clona o código do repositório na máquina virtual do GitHub
      - name: Clonar o repositório
        uses: actions/checkout@v3

      # Etapa 2: Instala a versão do Python necessária
      - name: Instalar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Etapa 3: Instala as dependências do projeto
      # pip install -r requirements.txt instala o Robot Framework e o que mais você precisar
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install robotframework matplotlib

      # Etapa 4: Inicializa os navegadores do Robot Framework Browser
      # Isso baixa o Chromium, Firefox e WebKit via Playwright
      - name: Inicializar o Browser
        run: rfbrowser init

      # Etapa 5: Executa os testes da pasta "tests" e salva os relatórios na pasta "results"
      # Você pode mudar a pasta se seus testes estiverem em outro lugar
      - name: Rodar os testes
        run: |
          xvfb-run robot -d results "Testes automatizados/tests"

      - name: Reportar bugs no Jira
        if: always()  # mesmo que o job falhe
        run: |
          python .github/scripts/report_jira.py
        env:
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_URL: ${{ secrets.JIRA_URL }}

      - name: Gerar resumo visual dos testes
        if: always()  # mesmo que o job falhe
        run: python .github/scripts/gerar_resumo.py

      - name: Upload do resumo, gráfico e resultados da execução como artefatos
        if: always()  # mesmo que o job falhe
        uses: actions/upload-artifact@v4
        with:
          name: resumo-resultados-grafico
          path: |
            results/
            resumo_testes.md
            resumo_pizza.png